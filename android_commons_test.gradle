import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

dependencies {
    androidTestImplementation TestLibraries.androidTestRunner
    androidTestImplementation TestLibraries.junit
    androidTestImplementation TestLibraries.mockkAndroid
    androidTestImplementation TestLibraries.fragmentNav
    androidTestImplementation TestLibraries.espresso
    androidTestImplementation TestLibraries.espressoContrib
    androidTestImplementation TestLibraries.koin
    androidTestImplementation TestLibraries.archCoreTest
    androidTestImplementation TestLibraries.testRules

    testImplementation TestLibraries.androidTestRunner
    testImplementation TestLibraries.junit
    testImplementation TestLibraries.mockk
    testImplementation TestLibraries.archCoreTest
    testImplementation TestLibraries.mockWebServer
    testImplementation TestLibraries.koin

    kaptAndroidTest TestLibraries.databinding

    testImplementation project(Modules.commonTest)
    androidTestImplementation project(Modules.commonTest)
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}